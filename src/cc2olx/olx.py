import io
import re
import os
import tarfile
import xml.dom.minidom
from shutil import copytree, rmtree


class OlxExport:
    def __init__(self, cartridge):
        self.cartridge = cartridge
        self.doc = None
        self.count = 0

    def xml(self):
        self.doc = xml.dom.minidom.Document()
        self.doc.appendChild(self.doc.createComment(" Generated by cc2olx "))
        xcourse = self.doc.createElement("course")
        self.doc.appendChild(xcourse)
        xcourse.setAttribute("org", self.cartridge.get_course_org())
        xcourse.setAttribute("course", "Some_cc_Course")
        xcourse.setAttribute("name", self.cartridge.get_title())
        start_date = self.cartridge.get_start_date()
        if start_date:
            xcourse.setAttribute("start", start_date)
        end_date = self.cartridge.get_end_date()
        if end_date:
            xcourse.setAttribute("end", end_date)
        xcourse.setAttribute("course_image", self.cartridge.get_course_image())

        tags = "chapter sequential vertical".split()
        self._add_olx_nodes(xcourse, self.cartridge.normalized['children'], tags)
        return self.doc.toprettyxml()

    def _add_olx_nodes(self, elt, data, tags):
        leaf = not tags
        self.count = self.count + 1
        for dd in data:
            if leaf:
                type = None
                if "identifierref" in dd:
                    idref = dd["identifierref"]
                    type, details = self.cartridge.get_resource_content(idref, self.count)
                if type is None:
                    type = "html"
                    details = {
                        "html": "<p>MISSING CONTENT</p>",
                    }
                if type == "link":
                    type, details = convert_link_to_video(details)
                if type == "link":
                    type = "html"
                    details = {
                        "html": "<a href='{}'>{}</a>".format(details["href"], details.get("text", "")),
                    }
                if type == "html":
                    child = self.doc.createElement("html")
                    txt = self.doc.createCDATASection(details["html"])
                    child.appendChild(txt)
                elif type == "video":
                    child = self.doc.createElement("video")
                    child.setAttribute("youtube", "1.00:" + details["youtube"])
                    child.setAttribute("youtube_id_1_0", details["youtube"])
                elif type == 'lti':
                    child = self._create_lti_node(details)
                else:
                    raise Exception("WUT")
            else:
                child = self.doc.createElement(tags[0])
            if "title" in dd:
                child.setAttribute("display_name", dd["title"])
            elt.appendChild(child)
            if "children" in dd:
                self._add_olx_nodes(child, dd["children"], tags[1:])

    def _create_lti_node(self, details):
        node = self.doc.createElement('lti_consumer')
        custom_parameters = "[{params}]".format(
            params=', '.join([
                '"{key}={value}"'.format(
                    key=key,
                    value=value,
                )
                for key, value in details['custom_parameters'].items()
            ]),
        )
        node.setAttribute('custom_parameters', custom_parameters)
        node.setAttribute('description', details['description'])
        node.setAttribute('display_name', details['title'])
        node.setAttribute('inline_height', details['height'])
        node.setAttribute('inline_width', details['width'])
        node.setAttribute('launch_url', details['launch_url'])
        node.setAttribute('modal_height', details['height'])
        node.setAttribute('modal_width', details['width'])
        node.setAttribute('xblock-family', 'xblock.v1')
        return node


def convert_link_to_video(details):
    """Possibly convert a link to a video."""
    # YouTube links can be like this: https://www.youtube.com/watch?v=gQ-cZRmHfs4&amp;amp;list=PL5B350D511278A56B
    ytmatch = re.search(r"youtube.com/watch\?v=([-\w]+)", details["href"])
    if ytmatch:
        return "video", {"youtube": ytmatch.group(1)}
    return "link", details


def onefile_tar_gz(filetgz, content, string_name):
    tarinfo = tarfile.TarInfo(string_name)
    tarinfo.size = len(content)

    with tarfile.open(str(filetgz), 'w:gz') as tgz:
        tgz.addfile(tarinfo, io.BytesIO(content))

def multifile_tar_gz(filetgz, olx_file, cartridge_dir, asset_path, contents, string_name="course.xml"):
    """
    crates tar.gz file having assets(static dir) of course and course.xml
    """
    tarinfo = tarfile.TarInfo(string_name)
    tarinfo.size = len(contents)
    try:
        static_dir = cartridge_dir + 'assets/static'
        if os.path.exists(static_dir) and os.path.isdir(static_dir):
            rmtree(static_dir)
        copytree(asset_path, static_dir)
    except Exception as e:
        pass
    else:
        with tarfile.open(filetgz, 'w:gz') as tgz:
            tgz.addfile(tarinfo, io.BytesIO(contents))
            tgz.add(static_dir, arcname='static')
